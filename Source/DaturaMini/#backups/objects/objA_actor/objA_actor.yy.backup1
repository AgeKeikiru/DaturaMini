// 2021-08-22 14:27:29
#event properties (no comments/etc. here are saved)
parent_index = -1;
uses_physics = false;

#event create
#region //vars

	#macro GRAVITY 0.23
	#macro MAX_JUMP 0.2
	#macro BOSS_STUNMAX 10
	#macro SPRINT_RATE 1
	#macro SPRINT_THRESH 0.94
	
	depth = 0;
	
	s_idle = noone;
	s_move = noone;
	s_shake = 0;
	
	player = false;
	hazard = false;
	boss = false;
	armored = false;
	
	hp = 1;
	bossHp = 1;
	bossStun = 0;
	
	deadspin = 0;
	
	input_x = 0;
	input_y = 0;
	input_lock = false;
	move_lock = false;
	
	force_x = 0;
	force_y = 0;

    fixed = false; //fixed position
	weight = 1;
	moveSpd = 1.3;
	sprinting = 0;
	sprintAftImg = noone;
	jumpSpd = 2.5;
	jumpTime = -1;
	maxFall = 5; //terminal velocity

	state_current = noone; //state system
	state_is_new = true;
	state_timer = 0;
	
	cstate_curr = noone; //custom states, adding additional states to the platforming state system is not behaving as planned
	cstate_new = true;
	cstate_time = 0;
	
	stun = 0;
	iFrames = 0;
	iState = false;
	blocking = false;
	
	arr_timers = [0];
	
	//aggro bounds for letting enemies detect the player
	aggro_ahead = 0;
	aggro_above = 0;
	aggro_w = -1;
	aggro_h = -1;
	
	//character specific effects
	sp_frozen = false;
	
	intf_platforming_implement();
	intf_warnBeam_implement();

#endregion


#region //functions
	
	function fn_getAggroRect(){
	
		if(aggro_w < 1 || aggro_h < 1){ return noone; }
		
		var
		_x = x + (aggro_ahead * image_xscale),
		_y = y + -aggro_above;
		
		return new lwo_rectangle(_x + -aggro_w, _y + -aggro_h, _x + aggro_w, _y + aggro_h);
	
	}
	
	function scr_playerIO(_key, _type, _ignoreLock){
		
		if(is_undefined(_type)){ _type = en_ioType.DOWN; }
		if(is_undefined(_ignoreLock)){ _ignoreLock = false; }
		
		return (!input_lock || _ignoreLock) && stun <= 0 && io_check(_type, _key);

	}
	
	function facePlayer(){
	
		if(instance_exists(obj_player)){
			image_xscale = (x > obj_player.x) ? -1 : 1;
		}
	
	}
	
	#region //states
	
		function switchState(_state){
		
			cstate_time = 0;
			cstate_new = true;
			cstate_curr = _state;
			iState = false;
			blocking = false;
			
			globalvar G_id;
			G_id = id;
			
			with obj_pAtk_afterimage{
			    
			    if(id != global.hyperAfterImg && src == G_id){
			        instance_destroy();
			    }
			    
			}
			
			hazard = false;
			
			arr_warns = [];
		
		}
		
		function checkState(_state){
			return _state == cstate_curr;
		}
		
		function pstate_ground(){
			
			//on-enter actions
			if(state_is_new){
				
				input_x = 0; //stop movement upon landing if moving in midair from an attack
				
				spd_y = 0;
				spdFrac_y = 0;
				
				state_is_new = false;
				
			}

			if(!on_ground()){
				state_current = method(undefined, pstate_air);
			}else{

				jumpTime = -1;
				
				if(player && scr_playerIO([en_input.GAME_JUMP], en_ioType.PRESS)){
					
					if(scr_playerIO([en_input.UNI_DOWN]) && on_passThru() && !on_wall() && !on_slope()){
						
						y++;
						spd_y = 2;
						
					}else{
						
						spd_y = -jumpSpd;
						jumpTime = 0;
						
					}
					
					move_lock = false;
					state_current = method(undefined, pstate_air);
					exit;
					
				}
			
			}
			
		}
		
		function pstate_air(){
		
			//on-enter actions
			if(state_is_new){
				
				state_is_new = false;
				
			}

			//change state when hitting the ground and not going up
			if(on_ground() && spd_y >= 0){
				state_current = method(undefined, pstate_ground);
			}else{

				//gravity
				if(scr_playerIO([en_input.GAME_JUMP], en_ioType.RELEASE)){
					jumpTime = -1;
				}else if(clamp(jumpTime, 0, MAX_JUMP) == jumpTime){
				
					spd_y = -jumpSpd;
					jumpTime += global.timeFlow / room_speed;
					
					if(player && global.hyperActive){
					    
					    spd_y *= 1.4;
					    
					}
				
				}else{
					spd_y += GRAVITY * weight * global.timeFlow;
				}

				if(spd_y > maxFall){
					spd_y = maxFall;
				}
				
			}
		
		}
	
	#endregion

#endregion

state_current = method(undefined, pstate_ground);

#event step
var
_state = state_current;

if(stun <= 0){

	if(player && !input_lock && (cstate_curr == noone || !move_lock)){
		
		input_x = scr_playerIO([en_input.UNI_RIGHT]) + -scr_playerIO([en_input.UNI_LEFT]);
		
	}

	if(abs(input_x)){
	
		image_xscale = input_x;
		spd_x = input_x * moveSpd;
		
		if(player && (global.hyperActive || sprinting > SPRINT_THRESH)){
		    spd_x *= 1.5;
		}
		
		if(sprite_index == s_idle && s_idle != s_move){
			sprite_index = s_move;
		}
	
	}else{

		spd_x = 0;
		
		if(sprite_index == s_move && s_idle != s_move){
			sprite_index = s_idle;
		}

	}

}

if(state_current != noone){
	state_current();
}

if(cstate_curr != noone){
	
	cstate_curr();
	
	sprinting = 0;
	
}else if(player){
    
    sprinting += TICK * SPRINT_RATE * ((input_x == 0) ? -1 : 1);
     
    sprinting = clamp(sprinting, 0, 1);
    
    if(sprinting > SPRINT_THRESH){
        
        if(!instance_exists(sprintAftImg)){
            
            sprintAftImg = scr_place(obj_pAtk_afterimage, x, y);
            sprintAftImg.src = id;
            sprintAftImg.depth = depth + 99;
            sprintAftImg.mask_index = spr_noMask;
            
        }
        
        sprintAftImg.x = x;
        sprintAftImg.y = y;
        sprintAftImg.sprite_index = sprite_index;
        sprintAftImg.image_xscale = image_xscale;
        
    }else if(instance_exists(sprintAftImg)){
        
        instance_destroy(sprintAftImg);
        sprinting = 0;
        
    }
    
}

state_is_new = _state != state_current;
state_timer = state_is_new ? 0 : (state_timer + global.timeFlow);

if(stun > 0){
	stun += -global.timeFlow / room_speed;
}else{
	cstate_time += global.timeFlow / room_speed;
}

if(iFrames > 0){
	iFrames += -global.timeFlow / room_speed;
}

for(var _i = 0; _i < array_length(arr_timers); _i++){
	
	if(arr_timers[_i] > 0){ arr_timers[_i] += -global.timeFlow / room_speed; }
	
}

force_x = scr_approach(force_x, 0, 0.15 * global.timeFlow);
force_y = scr_approach(force_y, 0, 0.15 * global.timeFlow);

#region //movement calculation

    if(!fixed){
        
    	roundSpd();
    
    	// Let the instance decide what to do when it can't move
    	if(!move_x((spdInt_x + force_x) * global.timeFlow, true)){
    	    spd_x = 0;
    	    spdFrac_x = 0;
    	}
    
    	if(!move_y((spdInt_y + force_y) * global.timeFlow)){
    	    spd_y = 0;
    	    spdFrac_y = 0;
    	}
	
    }

#endregion

#region //sudden wall-clip handling

	if(collision_rectangle(bbox_left, bbox_top, x, bbox_bottom, obj_cb_wall, false, true)){
		x++;
	}
	
	if(collision_rectangle(bbox_right, bbox_top, x, bbox_bottom, obj_cb_wall, false, true)){
		x--;
	}

#endregion

if(boss && bossStun > 0){
    
    bossStun += -(1 * global.timeFlow) / room_speed;
    
}

image_speed = global.timeFlow;

#event draw

warnBeam_draw();

var
_a = 1;

if(iFrames > 0 && (current_time mod room_speed) > (room_speed / 2)){
	_a = 0.5;
}

if(sprite_index != noone){
	
	var _col = image_blend;
	
	if(stun > 0){
	    _col = sp_frozen ? c_aqua : c_red;
	}
	
	if(object_index == obj_player && en < 1){
    	_col = merge_color(c_blue, c_white, abs(sin(current_time / 60)) * 0.5);
    }
	
	//note: do not apply sprite shake to Y axis
	draw_sprite_ext(sprite_index, -1, x + s_shake, y, image_xscale, image_yscale, image_angle + deadspin, _col, _a);
	
	s_shake = -lerp(s_shake, 0, 0.2);
	
}

#event draw_end
drawMask();

if(aggro_w >= 1 && aggro_h >= 1 && checkDebugView()){

	draw_set_color(c_red);
	
	var _box = fn_getAggroRect();
	
	draw_rectangle(_box.x1, _box.y1, _box.x2, _box.y2, true);
	
	draw_set_color(c_white);

}