// 2021-08-30 19:06:09
#event properties (no comments/etc. here are saved)
parent_index = objA_actor;
uses_physics = false;

#event create
event_inherited();

intf_platforming_implement();

#region //hyper decay

    #macro HYPER_DECAY 0.1
    
    var
    _map = global.map_hyperValue;
    
    if(!ds_map_exists(_map, object_index)){
        
        _map[? object_index] = 1 + HYPER_DECAY;
        
    }
    
    var _key = ds_map_find_first(_map);
    
    while(ds_map_exists(_map, _key)){
        
        _map[? _key] += (_key == object_index) ? -HYPER_DECAY : HYPER_DECAY;
        
        _map[? _key] = clamp(_map[? _key], 0, 1 + HYPER_DECAY);
        
        _key = ds_map_find_next(_map, _key);
        
    }

#endregion

depth = -999;

lst_hits = ds_list_create(); //keep track of enemies hit

dmg = 0;
duration = -1;
weight = 0;
push = 3;
lift = 2;
atkStun = 0.3;

#macro SLOW_STD 0.2
slowTo = -1;
slowDur = 0.2;

passWall = true;
passEnemy = true;

//projectile velocity
pv_x = 0;
pv_y = 0;
pv_d = 0; //directional

//cam shake effects
shakeX = [-1, 1];
shakeY = [-1, 1];
shake_onDeath = false;

hitSound = sfx_hit;

hitSpark = noone;
hitSparkX = 0;
hitSparkY = 0;

altBlend = false;

glow = noone;

//character specific effects
sp_freeze = 0; //for breia, 0:none, 1:add freeze, 2:break freeze

fn_addSpark = function(_x, _y){
    
    if(hitSpark != noone){
        
        var
        //_spark = scr_place(obj_spark, _x + (hitSparkX * sign(image_xscale)), _y + hitSparkY);
        _spark;
        
        repeat(2){
        
            _spark = scr_place(obj_spark, _x + (hitSparkX * sign(image_xscale)), _y + hitSparkY);
            
            _spark.sprite_index = hitSpark;
            //_spark.image_blend = obj_player.currPly.uiCol;
            _spark.duration = sprite_get_number(hitSpark);
            _spark.image_xscale = sign(image_xscale);
            _spark.depth = depth + -999;
        
        }
        
        _spark.image_blend = obj_player.currPly.uiCol;
        _spark.x += 1;
        
    }
    
}

fn_collCheck = function(_other){
    
    return (!hazard && object_is_ancestor(_other.object_index, obj_enemy) && !_other.checkState(_other.fn_state_dead) && !_other.player && ds_list_find_index(lst_hits, _other.id) == -1 && _other.iFrames <= 0 && !_other.iState);
    
}

#event destroy Insert description here
if(instance_exists(glow)){
    glow.live = false;
}


#event step
event_inherited();

if(duration > 0){
	
	duration += -global.timeFlow;
	
	if(duration <= 0){ instance_destroy(); }
	
}

if(pv_d != 0){
	speed = pv_d * global.timeFlow;
}else{
	
	hspeed = pv_x * global.timeFlow;
	vspeed = pv_y * global.timeFlow;
	
}

if(collision_rectangle(bbox_left + -1, bbox_top + -1, bbox_right + 1, bbox_bottom + 1, objA_solid, true, true) && !passWall){
    instance_destroy();
}

if((x != clamp(x, obj_ui.x, obj_ui.x + obj_ui.camW) || y != clamp(y, obj_ui.y, obj_ui.y + obj_ui.camH + 20)) && !hazard){
    instance_destroy();
}

#event step_end
event_inherited();

if(instance_exists(glow)){
    glow.x = x;
    glow.y = y;
}

#event collision:objA_actor
event_inherited();

if(fn_collCheck(other) && mask_index != spr_noMask){
	
	var _dmg = dmg;
	
	if(other.sp_frozen && other.stun > 0 && !sp_freeze){
	    
	    _dmg *= 1.5;
	    audf_playSfx(sfx_iceBreak);
	    other.stun = 0;
	    
	}
	
	other.sp_frozen = sp_freeze;
	
	if(sp_freeze){
	    audf_playSfx(sfx_freeze);
	}
	
	audf_playSfx(other.armored ? sfx_chipDmg : hitSound);
	
	ds_list_add(lst_hits, other.id);
	
	if(ds_list_find_index(other.lst_uniqueHits, object_index) == -1){
		ds_list_add(other.lst_uniqueHits, object_index);
	}
	
	takeDmg(other, _dmg * (global.hyperActive ? 2 : 1), push, lift, atkStun);
	
	fn_addSpark(clamp(x, other.bbox_left, other.bbox_right), clamp(y, other.bbox_top, other.bbox_bottom));
	
	addHyper(global.map_hyperValue[? object_index] * 0.02);
	
	if(other.hp <= 0){
		
		addHyper(0.05);
		
		other.switchState(other.boss ? other.fn_state_bossDead : other.fn_state_dead);
		
	}else if(other.boss){
	    other.bossStun += _dmg;
	}
	
	if(slowTo > 0 && slowDur > 0){
		
		global.timeFlow = slowTo;
		global.timeSlow = slowDur;
		
	}
	
	if(!passEnemy){
		instance_destroy();
	}
	
	shakeCam(random_range(shakeX[0], shakeX[1]), random_range(shakeY[0], shakeY[1]));
	
}

#event draw

var _col = image_blend;
image_blend = c_white;

event_inherited();

gpu_set_blendmode(bm_add);

image_blend = _col;

event_inherited();

gpu_set_blendmode(bm_normal);

#event draw_end
event_inherited();

drawMask();

#event cleanup
event_inherited();

ds_list_destroy(lst_hits);