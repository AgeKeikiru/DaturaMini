// 2021-04-21 16:55:40
#event properties (no comments/etc. here are saved)
parent_index = objA_actor;
uses_physics = false;

#event create
event_inherited();

intf_platforming_implement();

#region //hyper decay

    #macro HYPER_DECAY 0.1
    
    var
    _map = global.map_hyperValue;
    
    if(!ds_map_exists(_map, object_index)){
        
        _map[? object_index] = 1 + HYPER_DECAY;
        
    }
    
    var _key = ds_map_find_first(_map);
    
    while(ds_map_exists(_map, _key)){
        
        _map[? _key] += (_key == object_index) ? -HYPER_DECAY : HYPER_DECAY;
        
        _map[? _key] = clamp(_map[? _key], 0, 1 + HYPER_DECAY);
        
        _key = ds_map_find_next(_map, _key);
        
    }

#endregion

depth = -999;

lst_hits = ds_list_create(); //keep track of enemies hit

dmg = 0;
duration = -1;
weight = 0;
push = 3;
lift = 2;
atkStun = 0.3;

#macro SLOW_STD 0.2
slowTo = -1;
slowDur = 0.2;

passWall = true;
passEnemy = true;

//projectile velocity
pv_x = 0;
pv_y = 0;
pv_d = 0; //directional

//cam shake effects
shakeX = [-1, 1];
shakeY = [-1, 1];
shake_onDeath = false;

hitSound = sfx_hit;

#event destroy Insert description here
// You can write your code in this editor


#event step
event_inherited();

if(duration > 0){
	
	duration += -global.timeFlow;
	
	if(duration <= 0){ instance_destroy(); }
	
}

if(pv_d != 0){
	speed = pv_d * global.timeFlow;
}else{
	
	hspeed = pv_x * global.timeFlow;
	vspeed = pv_y * global.timeFlow;
	
}

if(collision_rectangle(bbox_left + -1, bbox_top + -1, bbox_right + 1, bbox_bottom + 1, objA_solid, true, true) && !passWall){
    instance_destroy();
}

if((x != clamp(x, obj_ui.x, obj_ui.x + obj_ui.camW) || y != clamp(y, obj_ui.y, obj_ui.y + obj_ui.camH)) && !hazard){
    instance_destroy();
}

#event collision:objA_actor
event_inherited();

if(!hazard && object_is_ancestor(other.object_index, obj_enemy) && !other.checkState(other.fn_state_dead) && !other.player && ds_list_find_index(lst_hits, other.id) == -1 && other.iFrames <= 0 && !other.iState){
	
	audf_playSfx(hitSound);
	
	ds_list_add(lst_hits, other.id);
	
	if(ds_list_find_index(other.lst_uniqueHits, object_index) == -1){
		ds_list_add(other.lst_uniqueHits, object_index);
	}
	
	takeDmg(other, dmg * (global.hyperActive ? 2 : 1), push, lift, atkStun);
	
	addHyper(global.map_hyperValue[? object_index] * 0.02);
	
	if(other.hp <= 0){
		
		addHyper(0.05);
		
		other.switchState(other.boss ? other.fn_state_bossDead : other.fn_state_dead);
		
	}else if(other.boss){
	    other.bossStun += dmg;
	}
	
	if(slowTo > 0 && slowDur > 0){
		
		global.timeFlow = slowTo;
		global.timeSlow = slowDur;
		
	}
	
	if(!passEnemy){
		instance_destroy();
	}
	
	shakeCam(random_range(shakeX[0], shakeX[1]), random_range(shakeY[0], shakeY[1]));
	
}

#event draw_end
event_inherited();

drawMask();

#event cleanup
event_inherited();

ds_list_destroy(lst_hits);